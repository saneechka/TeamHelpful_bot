name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy with fixed docker-compose
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            set -e  # Stop on error
            
            # Create directory if it doesn't exist
            mkdir -p ~/telegram-bot
            
            # Clone or update repository
            if [ ! -d ~/telegram-bot/.git ]; then
              cd ~/telegram-bot
              git clone ${{ github.server_url }}/${{ github.repository }} .
            else
              cd ~/telegram-bot
              git fetch --all
              git reset --hard origin/main
            fi
            
            cd ~/telegram-bot
            
            # Create proper docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.3'

            services:
              helpbot:
                build: .
                restart: always
                environment:
                  - BOT_TOKEN=\${BOT_TOKEN}
                volumes:
                  - ./users.db:/app/users.db
            EOL
            
            # Create .env file with bot token
            echo 'BOT_TOKEN=${{ secrets.BOT_TOKEN }}' > .env
            
            # Stop and remove old containers
            docker-compose down
            
            # Build and start Docker containers
            docker-compose up -d --build
            
            # Check status
            docker-compose ps
            
            # Output logs for diagnostics
            echo 'Recent logs:'
            docker-compose logs
            
            echo 'Deployment completed!'
          "
      
      - name: Verify deployment
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd ~/telegram-bot
            
            # Check if container is running
            if ! docker-compose ps | grep 'Up'; then
              echo 'Error: Bot container is not running!'
              docker-compose logs
              exit 1
            fi
            
            echo 'Verification completed: Bot is running correctly!'
          "
